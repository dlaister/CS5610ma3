{"ast":null,"code":"var _jsxFileName = \"/Users/dereklaister/Desktop/CS5610ma3/src/CountContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountContext = /*#__PURE__*/createContext();\n\n// Create the provider\nexport function CountProvider({\n  children\n}) {\n  _s();\n  const [count, setCount] = useState(0);\n  const [clickedBoxes, setClickedBoxes] = useState([false, false, false, false]);\n  const onClick = event => {\n    const newClickedBoxes = [...clickedBoxes];\n    newClickedBoxes[event] = !newClickedBoxes[event];\n\n    // Set the new state for clicked boxes\n    setClickedBoxes(newClickedBoxes);\n\n    // Update the count based on how many boxes are clicked\n    const newCount = newClickedBoxes.filter(Boolean).length; // Count how many `true` values there are\n    setCount(newCount);\n  };\n  return /*#__PURE__*/_jsxDEV(CountContext.Provider, {\n    value: {\n      count,\n      clickedBoxes,\n      onClick\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n// Create a custom hook to use the context\n_s(CountProvider, \"hPckxRCq2FlcmaylisWCGJS4KOc=\");\n_c = CountProvider;\nexport const useCount = () => {\n  _s2();\n  return useContext(CountContext);\n};\n_s2(useCount, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CountProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","CountContext","CountProvider","children","_s","count","setCount","clickedBoxes","setClickedBoxes","onClick","event","newClickedBoxes","newCount","filter","Boolean","length","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCount","_s2","$RefreshReg$"],"sources":["/Users/dereklaister/Desktop/CS5610ma3/src/CountContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\n// Create the context\nconst CountContext = createContext();\n\n// Create the provider\nexport function CountProvider({ children }) {\n    const [count, setCount] = useState(0);\n    const [clickedBoxes, setClickedBoxes] = useState([false, false, false, false]);\n\n    const onClick = (event) => {\n        const newClickedBoxes = [...clickedBoxes];\n        newClickedBoxes[event] = !newClickedBoxes[event];\n\n        // Set the new state for clicked boxes\n        setClickedBoxes(newClickedBoxes);\n\n        // Update the count based on how many boxes are clicked\n        const newCount = newClickedBoxes.filter(Boolean).length;  // Count how many `true` values there are\n        setCount(newCount);\n    };\n\n    return (\n        <CountContext.Provider value={{ count, clickedBoxes, onClick }}>\n            {children}\n        </CountContext.Provider>\n    );\n}\n\n// Create a custom hook to use the context\nexport const useCount = () => useContext(CountContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,SAASM,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;EAE9E,MAAMY,OAAO,GAAIC,KAAK,IAAK;IACvB,MAAMC,eAAe,GAAG,CAAC,GAAGJ,YAAY,CAAC;IACzCI,eAAe,CAACD,KAAK,CAAC,GAAG,CAACC,eAAe,CAACD,KAAK,CAAC;;IAEhD;IACAF,eAAe,CAACG,eAAe,CAAC;;IAEhC;IACA,MAAMC,QAAQ,GAAGD,eAAe,CAACE,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM,CAAC,CAAE;IAC1DT,QAAQ,CAACM,QAAQ,CAAC;EACtB,CAAC;EAED,oBACIZ,OAAA,CAACC,YAAY,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,KAAK;MAAEE,YAAY;MAAEE;IAAQ,CAAE;IAAAN,QAAA,EAC1DA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC;;AAEA;AAAAjB,EAAA,CAvBgBF,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAwB7B,OAAO,MAAMqB,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM1B,UAAU,CAACG,YAAY,CAAC;AAAA;AAACuB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}